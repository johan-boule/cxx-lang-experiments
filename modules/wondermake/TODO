*	ISO C++ module keyword parsers http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1103r3.pdf
	The following is not supported:
		- partitions:
			export module foo:part;
			module foo:part;
			module foo;
			import :part; // imports foo:part
		- global module fragment:
			module;
			#include "header"
			export module foo;
		- header units:
			import "header"
			import <header>

*	fix clean/auto-clean: leaves implicit mxx derivations

*	explicit mxx files have path with no ./ while implicit ones have ./
	This means we don't deduplicate correctly.

*	auto-link by using module import information

*	pkg-config
		auto-generate (use pcfiledir, is this new?)

*	ld
	soname and symlinks
		ln -s lib.%.so.<version> lib.%.so
		-Wl,-h,lib.%.so.<version>
	-Wl,-no-undefined -Wl,--undefined
	--push/pop-state -Wl,-Bstatic -Wl,-Bdynamic (no need thanks to auto-clean)

*	std version
	note: to list clang's supported names, use clang++ -xc++ -std= -

*	detect compiler
	c++/cc/g++/gcc/clang++/clang -dumpversion (note: clang => fake old gcc version)
	cl -? => First line "XXX Version X.Y.Z for XXX"
	In the end: 3 "kinds": gcc, msvc, posix (which prolly won't work)
	See also g++/clang++ -print-prog-name=ld, g++/clang++ -Wl,--version

*	cross-compilation
	#if defined __ELF__
		#define WONDERBUILD__BIN_FMT "elf"
	#elif defined __APPLE__ && defined __MACH__
		#define WONDERBUILD__BIN_FMT "mac-o"
	#elif defined _WIN32 /* note: is also defined when _WIN64 is defined */ || defined __CYGWIN__ || defined __MSYS__ || defined _UWIN
		#define WONDERBUILD__BIN_FMT "pe"
	#else
		#error unkown binary format
	#endif

	#if defined __linux__
		#define WONDERBUILD__OS "linux"
	#elif defined __GNU__
		#define WONDERBUILD__OS "hurd"
	#elif defined __OpenBSD__
		#define WONDERBUILD__OS "openbsd"
	#elif defined __FreeBSD__
		#define WONDERBUILD__OS "freebsd"
	#elif defined __NetBSD__
		#define WONDERBUILD__OS "netbsd"
	#elif defined __sun
		#if defined __SVR4
			#define WONDERBUILD__OS "solaris"
		#else
			#define WONDERBUILD__OS "sunos"
		#endif
	#elif defined __sgi
		#define WONDERBUILD__OS "irix"
	#elif defined __hpux
		#define WONDERBUILD__OS "hpux"
	#elif defined _AIX
		#define WONDERBUILD__OS "aix"
	#elif defined __APPLE__ && defined __MACH__
		#define WONDERBUILD__OS "darwin"
	#elif defined __CYGWIN__
		#define WONDERBUILD__OS "cygwin"
	#elif defined __MSYS__
		#define WONDERBUILD__OS "msys"
	#elif defined _UWIN__
		#define WONDERBUILD__OS "uwin"
	#elif defined _WIN32
		#define WONDERBUILD__OS "win"
	#elif defined __QNX__
		#define WONDERBUILD__OS "qnx"
	#elif defined __native_client__
		#define WONDERBUILD__OS "nacl"
	#elif defined __unix__ || defined unix
		#define WONDERBUILD__OS "unix"
	#else
		#error unkown operating system
	#endif

	#if defined __x86_64__
		#define WONDERBUILD__ARCH "x86_64"
	#elif defined __i386__
		#define WONDERBUILD__ARCH "x86"
	#elif defined __ia64__
		#define WONDERBUILD__ARCH "ia"
	#elif defined __mips__
		#define WONDERBUILD__ARCH "mips"
	#elif defined __sparc__
		#define WONDERBUILD__ARCH "sparc"
	#elif defined __alpha__
		#define WONDERBUILD__ARCH "alpha"
	#elif defined __arm__
		#define WONDERBUILD__ARCH "arm"
	#elif defined __hppa__
		#define WONDERBUILD__ARCH "hppa"
	#elif defined __powerpc__
		#define WONDERBUILD__ARCH "powerpc"
	#else
		#define WONDERBUILD__ARCH "unknown"
	#endif

	WONDERBUILD__BIN_FMT
	WONDERBUILD__OS
	WONDERBUILD__ARCH

*	install
	env: 'DESTDIR', 'PREFIX', 'EXECPREFIX'
	options: prefix, exec-prefix
	fhs:
		exec_prefix ?= prefix
		exec_prefix/bin
		exec_prefix/lib
		exec_prefix/libexec
		prefix/include
		prefix/share

*	mac-o
	either lib%.dylib (shared_lib) or %.bundle (loadable_module) instead of lib%.so and %.so
	framework: cpp: -F %, ld -framework % (or -Xlinker -f% or -Wl,-f%)
	no need for pic flag
	ld: -dynamiclib instead of -shared
	bundle: -flat_namespace -bundle -undefined suppress
	-install_name lib%.dylib
	-fno-common
	loadable_module usage: -ldl / #include <dlfcn.h> is replaced with #import <mach-o/dyld.h>

*	cygwin
	use cyg prefix instead of lib

*	mingw
	lib%.dll instead of lib%.so
	import lib: -Wl,--out-implib,lib%.dll.a # mingw doesn't need import libs
	-Wl,--enable-auto-import # suppress informational messages

*	msvc? really, do we care anymore?
	Taken from Wonderbuild msvc_impl.py
	for everything: -nologo (grrr!)
	programs: cpp/cxx = cl, ld = link, ar/ranlib = lib
	cpp -ShowIncludes -D -U -FI -I
	build check: -EP = pipe preproc, -P = preproc, -c = compile, -linker = link
	pch:
		create: -c -Yc -Tp %.hxx -Fp %.pch (default) -Fo %.obj (default)
		use: -Yu basename%.hpp -Fp %.pch -FI basename%.hpp (-FI is the equivalent of -include)
	ld: either cl xxx -link xxx
		or link -dll -out:%.dll/%.exe -implib:%.lib -libpath:% lib%.lib %.lib
	ar: lib -out:.lib%.lib -remove:%.obj
	ranlib: none
	env vars: cpp INCLUDE, ld LIB

*	large build system: allow evaluating only the scopes that are in command requested goals
	=> requires auto-clean per scope

*	find source files only on first make phase and read a file that contains the list on second phase

*	batch compilation.
	also verify whether ar supports member pathname or just basename.
	in any case, creating flat filenames like in wonderbuild would solve it.
	=> confirmed ar is borked and doesn't store path.

*	multiple inheritance
	consider whether this would make for a nicer syntax or not:
	$(scope).inherit += $(wondermake.cbase.inherit).$(call wondermake.inherit_unique,$(scope),type)
	$(scope).type := shared_lib
	$(call wondermake.inherit_append,$(scope),cxx_flags) => cbase.cxxflags cbase.shared_lib.cxxflags

*	accessors
	consider whether this would make for a nicer syntax or not:
	$(scope).cxx_flags._ := $($(scope).cxx_flags) # note: test $(flavor ...) for := or =
	$(scope).cxx_flags = $($(scope).cxx_flags._) $(call wondermake.inherit_append_no_self,$(scope),cxx_flags) # note _no_self
	beware of a scope that inherits from another scope: that would lead to duplicated values
	note also that this will prevent further assignments
	a more sane approach is prolly to use an alternate symbol like $(scope)!cxx_flags or $(scope)^cxx_flags

*	akin to -MM, use ldd to generate a dynamic makefile that contains the implicit deps on system-wide libs

*	generated headers: use -MG
